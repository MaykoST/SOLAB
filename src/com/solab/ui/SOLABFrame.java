/*
 * SOLABFrame.java
 *
 * Created on 11 de Setembro de 2007, 19:47
 */
package com.solab.ui;

import com.solab.model.event.SOEvent;
import com.solab.model.event.SOListener;
import com.solab.so.SO;
import com.solab.util.SOLogHandler;
import java.awt.Toolkit;
import java.util.logging.Logger;

/**
 * $Id: SOLABFrame.java,v 1.4 2008/06/16 13:22:55 Mayko Exp $
 *
 * @author Mayko Sartor - <a
 *         href="mailto:maykosartor@gmail.com">maykosartor@gmail.com </a><br>
 */
public class SOLABFrame extends javax.swing.JFrame implements SOListener {

    private SO so;
    private SOLogFrame logFrame;
    private SOMemoryFrame memFrame;
    private SOProcessFrame procFrame;
    private SOHelpFrame helpFrame;

    public SO getSo() {
        return so;
    }

    public void setSo(SO so) {
        this.so = so;
        this.soCommandPanel.setSo(so);
        this.solabPanel.setSo(so);

        this.logFrame = null;

        this.so.addSOListener(this);
    }

    /** Creates new form SOLABFrame */
    public SOLABFrame() {
        initComponents();
    }

    public void processQueueInitialized(SOEvent e) {
        so.getProcessQueue().addSOProcessQueueListener(solabPanel);
    }

    public void schedulerInitialized(SOEvent e) {
        so.getCPU().addSOCPUListener(solabPanel);
    }

    public void soStarted(SOEvent e) {
    }

    public void memoryInitialized(SOEvent e) {
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        solabPanel = new com.solab.ui.SOLABPanel();
        soCommandPanel = new com.solab.ui.SOCommandPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuJanela = new javax.swing.JMenu();
        mnuLog = new javax.swing.JMenuItem();
        mnuMemory = new javax.swing.JMenuItem();
        mnuProcesso = new javax.swing.JMenuItem();
        mnuAjuda = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout solabPanelLayout = new javax.swing.GroupLayout(solabPanel);
        solabPanel.setLayout(solabPanelLayout);
        solabPanelLayout.setHorizontalGroup(
            solabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 468, Short.MAX_VALUE)
        );
        solabPanelLayout.setVerticalGroup(
            solabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 359, Short.MAX_VALUE)
        );

        mnuJanela.setMnemonic('n');
        mnuJanela.setText("Janelas");

        mnuLog.setMnemonic('L');
        mnuLog.setText("Log");
        mnuLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuLogActionPerformed(evt);
            }
        });
        mnuJanela.add(mnuLog);

        mnuMemory.setText("Mem√≥ria");
        mnuMemory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuMemoryActionPerformed(evt);
            }
        });
        mnuJanela.add(mnuMemory);

        mnuProcesso.setText("Processos");
        mnuProcesso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuProcessoActionPerformed(evt);
            }
        });
        mnuJanela.add(mnuProcesso);

        mnuAjuda.setText("Ajuda");
        mnuAjuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAjudaActionPerformed(evt);
            }
        });
        mnuJanela.add(mnuAjuda);

        jMenuBar1.add(mnuJanela);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(soCommandPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(solabPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(solabPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(soCommandPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuLogActionPerformed
        if (this.logFrame != null) {
            this.logFrame.dispose();
        }
        this.logFrame = new SOLogFrame();

        SOLogHandler logH = new SOLogHandler();
        logH.setSoLogPanel(logFrame.getSoLogPanel());

        Logger.getLogger("").addHandler(logH);

        if (Toolkit.getDefaultToolkit().getScreenSize().width >= 1024) {    
            this.logFrame.setLocation(this.getX(), this.getY() + this.getHeight());
        } else {
            this.logFrame.setLocationRelativeTo(null);
        }    
        
        this.logFrame.setVisible(true);

}//GEN-LAST:event_mnuLogActionPerformed

private void mnuMemoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuMemoryActionPerformed
    if (this.memFrame != null) {
        this.memFrame.dispose();
    }
    this.memFrame = new SOMemoryFrame();
    this.memFrame.setSo(so);
    if (Toolkit.getDefaultToolkit().getScreenSize().width >= 1024) {    
        this.memFrame.setLocation(this.getX() + this.getWidth(), this.getY());
    } else {
        this.memFrame.setLocationRelativeTo(null);
    }    
    this.memFrame.setVisible(true);
    this.so.addSOListener(this.memFrame);
}//GEN-LAST:event_mnuMemoryActionPerformed

private void mnuProcessoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuProcessoActionPerformed
    if (this.procFrame != null) {
        this.procFrame.dispose();
    }   
    
    this.procFrame = new SOProcessFrame();    
    this.procFrame.setSo(this.so);
    
    if (Toolkit.getDefaultToolkit().getScreenSize().width >= 1024) {    
        this.procFrame.setLocation(this.getX() + this.getWidth(), this.getY() + 450);
    } else {
        this.procFrame.setLocationRelativeTo(null);
    }   
    this.procFrame.setVisible(true);
}//GEN-LAST:event_mnuProcessoActionPerformed

private void mnuAjudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAjudaActionPerformed
    if (this.helpFrame != null) {
        this.helpFrame.dispose();
    }
    
    this.helpFrame = new SOHelpFrame();
    this.helpFrame.setLocationRelativeTo(null);
    this.helpFrame.setVisible(true);
}//GEN-LAST:event_mnuAjudaActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem mnuAjuda;
    private javax.swing.JMenu mnuJanela;
    private javax.swing.JMenuItem mnuLog;
    private javax.swing.JMenuItem mnuMemory;
    private javax.swing.JMenuItem mnuProcesso;
    private com.solab.ui.SOCommandPanel soCommandPanel;
    private com.solab.ui.SOLABPanel solabPanel;
    // End of variables declaration//GEN-END:variables
}